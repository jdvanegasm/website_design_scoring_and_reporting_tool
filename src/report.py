"""
report generator: builds html, pdf and markdown files for a given run
inputs: url, screenshot path, total score, breakdown dict, raw metrics
outputs: tuple(pdf_path, html_path, md_path)
"""

from __future__ import annotations

from pathlib import Path
from typing import Dict, Tuple
from base64 import b64encode
import datetime as dt

from jinja2 import Template
from weasyprint import HTML


# helpers


_EXPLAIN = {
    "whitespace": "proportion of empty space – more breathing room → cleaner layout",
    "contrast": "difference between light and dark – drives legibility",
    "color_harmony": "hues working together – cohesive palette feels professional",
    "text_density": "edge clutter proxy – too many edges → visual noise",
}

_TIPS = {
    "whitespace": "increase margin / padding and group related blocks",
    "contrast": "raise text-to-background contrast to meet WCAG 4.5:1",
    "color_harmony": "reduce palette to 2-3 accent colors and use consistent shades",
    "text_density": "limit simultaneous content; add whitespace between sections",
}

_THRESHOLDS = {k: 70 for k in _EXPLAIN}


_HTML_TMPL = """
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>design report – {{ url }}</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
<style>
:root{--accent:#0066ff;--bg:#f9fafb;--fg:#1f2937}
*{box-sizing:border-box}
body{font-family:'Inter',Arial,Helvetica,sans-serif;margin:0;background:var(--bg);color:var(--fg);padding:40px}
h1{font-size:32px;margin:0 0 12px}
h2{font-size:22px;margin:30px 0 10px}
.card{background:#fff;border-radius:12px;padding:24px;box-shadow:0 2px 8px rgba(0,0,0,.06)}
.score-badge{display:inline-block;background:var(--accent);color:#fff;border-radius:50%;width:120px;height:120px;line-height:120px;font-size:40px;font-weight:600;text-align:center;margin:20px 0}
table{border-collapse:collapse;width:100%;margin-top:15px}
th,td{padding:10px 14px;font-size:14px;vertical-align:top}
th{background:var(--accent);color:#fff;text-align:left}
tr:nth-child(even){background:#f3f4f6}
td.tip{color:#b91c1c}
img{width:100%;border-radius:8px;border:1px solid #e5e7eb;margin-top:10px}
footer{margin-top:40px;font-size:12px;color:#6b7280;text-align:center}
</style>
</head>
<body>
<div class="card">
    <h1>design report</h1>
    <div>target url: <strong>{{ url }}</strong></div>
    <div>generated: {{ timestamp }}</div>

    <h2>overview</h2>
    <div class="score-badge">{{ total }}</div>

    <h2>metrics</h2>
    <table>
        <thead><tr><th>criterion</th><th>raw&nbsp;(0-100)</th><th>weighted</th><th>why&nbsp;it&nbsp;matters</th></tr></thead>
        <tbody>
        {% for k,v in metrics.items() %}
            <tr>
                <td>{{ k }}</td>
                <td>{{ v }}</td>
                <td>{{ breakdown[k] }}</td>
                <td>{{ explain[k] }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    {% if tips %}
    <h2>actionable tips</h2>
    <ul>
        {% for t in tips %}
        <li class="tip">{{ t }}</li>
        {% endfor %}
    </ul>
    {% endif %}

    <h2>homepage snapshot</h2>
    <img src="data:image/png;base64,{{ b64 }}" alt="screenshot"/>
</div>
<footer>auto-generated by design-score-tool</footer>
</body>
</html>
"""


def _collect_tips(metrics: Dict[str, float]) -> list[str]:
    tips = []
    for k, v in metrics.items():
        if v < _THRESHOLDS[k]:
            tips.append(f"{k}: {_TIPS[k]}")
    return tips


def _render_html(
    url: str,
    screenshot_path: Path,
    total: float,
    breakdown: Dict[str, float],
    metrics: Dict[str, float],
) -> str:
    b64 = b64encode(screenshot_path.read_bytes()).decode()
    return Template(_HTML_TMPL).render(
        url=url,
        timestamp=dt.datetime.now().strftime("%Y-%m-%d %H:%M"),
        total=total,
        breakdown=breakdown,
        metrics=metrics,
        explain=_EXPLAIN,
        tips=_collect_tips(metrics),
        b64=b64,
    )


def _write_files(
    html: str,
    out_dir: Path,
    screenshot_path: Path,
    url: str,
    total: float,
    breakdown: Dict[str, float],
    metrics: Dict[str, float],
) -> Tuple[Path, Path, Path]:
    html_path = out_dir / "report.html"
    pdf_path = out_dir / "report.pdf"
    md_path = out_dir / "report.md"

    html_path.write_text(html, encoding="utf-8")
    HTML(string=html, base_url=str(out_dir)).write_pdf(pdf_path)

    # markdown pretty version
    md_lines = [
        f"# Design Report",
        f"**Target URL:** {url}",
        f"**Generated:** {dt.datetime.now().strftime('%Y-%m-%d %H:%M')}",
        "",
        f"## Overall Score",
        f"<div align='center'><span style='font-size:48px;font-weight:700;color:#0066ff'>{total}</span></div>",
        "",
        "## Metrics",
        "",
        "| Criterion | Raw | Weighted | Why it matters |",
        "|-----------|-----|----------|----------------|",
    ]
    for k, v in metrics.items():
        md_lines.append(f"| {k} | {v} | {breakdown[k]} | {_EXPLAIN[k]} |")
    tips = _collect_tips(metrics)
    if tips:
        md_lines.extend(
            ["", "## Actionable Tips", *[f"- **{t}**" for t in tips]]
        )
    md_lines.extend(
        [
            "",
            "## Homepage Snapshot",
            f"![screenshot]({screenshot_path.name})",
            "",
            "<sub>auto-generated by design-score-tool</sub>",
        ]
    )
    md_path.write_text("\n".join(md_lines), encoding="utf-8")

    return pdf_path, html_path, md_path


# public gateway


def generate_reports(
    url: str,
    screenshot_path: Path,
    total: float,
    breakdown: Dict[str, float],
    metrics: Dict[str, float],
    out_dir: Path,
):
    """
    builds html → pdf and markdown, returns their paths
    """
    out_dir = Path(out_dir)
    out_dir.mkdir(parents=True, exist_ok=True)

    html = _render_html(url, screenshot_path, total, breakdown, metrics)
    return _write_files(html, out_dir, screenshot_path, url, total, breakdown, metrics)